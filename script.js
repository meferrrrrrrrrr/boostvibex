document.addEventListener('DOMContentLoaded', () => {
    // SelectÄƒm elementele din HTML
    
    const promptSubject = document.getElementById('prompt-subject');
    const generateIdeaBtn = document.getElementById('generate-idea');
    const generateDescriptionBtn = document.getElementById('generate-description');
    const message = document.getElementById('message');
    const responseDiv = document.getElementById('response');
    const responseActions = document.querySelector('.response-actions');
    const generateAnotherBtn = document.getElementById('generate-another');
    const likeBtn = document.getElementById('like');
    const dislikeBtn = document.getElementById('dislike');
    const copyBtn = document.getElementById('copy-response');

    // FuncÈ›ie pentru a genera prompt-ul È™i a apela API-ul OpenAI
    async function generatePrompt(type) {
        const subject = promptSubject.value.trim();
        // Validare pentru subiect
        if (subject && !/^[a-zA-Z0-9\s]+$/.test(subject)) {
            message.textContent = 'Subiectul poate conÈ›ine doar litere, cifre È™i spaÈ›ii.';
            setTimeout(() => { message.textContent = ''; }, 3000);
            return;
        }

        let promptText = '';
        // GenerÄƒm prompt-ul Ã®n funcÈ›ie de tip (idei sau descrieri)
        if (type === 'idea') {
            promptText = subject ? 
                `GenereazÄƒ 3 idei de conÈ›inut viral pentru fitness pe tema ${subject}, potrivite pentru TikTok sau Instagram Reels. Include un challenge sau exerciÈ›iu care sÄƒ inspire peste 5.000 de share-uri, un titlu captivant È™i 1-2 hashtag-uri (ex. #FitnessChallenge).` : 
                `GenereazÄƒ 3 idei de conÈ›inut viral pentru fitness, potrivite pentru TikTok sau Instagram Reels. Include un challenge sau exerciÈ›iu care sÄƒ inspire peste 5.000 de share-uri, un titlu captivant È™i 1-2 hashtag-uri (ex. #FitnessChallenge).`;
        } else if (type === 'description') {
            promptText = subject ? 
                `Scrie o descriere captivantÄƒ de maxim 150 de caractere pentru un video YouTube de fitness despre ${subject}, destinatÄƒ unui public specific (ex. Ã®ncepÄƒtori, atleÈ›i). Include 2-3 cuvinte-cheie (ex. HIIT, yoga) È™i un CTA (ex. â€˜ÃŽncepe acum!â€™).` : 
                `Scrie o descriere captivantÄƒ de maxim 150 de caractere pentru un video YouTube de fitness, destinatÄƒ unui public specific (ex. Ã®ncepÄƒtori, atleÈ›i). Include 2-3 cuvinte-cheie (ex. HIIT, yoga) È™i un CTA (ex. â€˜ÃŽncepe acum!â€™).`;
        }

       

        // AfiÈ™Äƒm mesajul de loading
        message.textContent = 'Se genereazÄƒ ideea ta... ðŸš€';
        responseDiv.textContent = '';
        responseActions.style.display = 'none';

        // AdÄƒugÄƒm timeout pentru cerere
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 secunde timeout

        try {
            // Facem cererea cÄƒtre ruta /api/openai
            const response = await fetch('/api/openai', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ prompt: promptText }),
                signal: controller.signal
            });

            clearTimeout(timeoutId); // AnulÄƒm timeout-ul dacÄƒ cererea a avut succes

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Eroare la generarea rÄƒspunsului');
            }

            // AfiÈ™Äƒm rÄƒspunsul primit de la OpenAI
            message.textContent = '';
            responseDiv.textContent = data.text;
            responseActions.style.display = 'flex';
        } catch (error) {
            clearTimeout(timeoutId);
            message.textContent = 'Eroare: ' + (error.name === 'AbortError' ? 'Cererea a durat prea mult.' : error.message);
            setTimeout(() => {
                message.textContent = '';
            }, 3000);
        }
    }

    // AdÄƒugÄƒm event listener pentru butonul "Idei de conÈ›inut"
    generateIdeaBtn.addEventListener('click', () => {
        generatePrompt('idea');
    });

    // AdÄƒugÄƒm event listener pentru butonul "Descrieri optimizate"
    generateDescriptionBtn.addEventListener('click', () => {
        generatePrompt('description');
    });

    // AdÄƒugÄƒm event listener pentru "GenereazÄƒ alt rÄƒspuns"
    generateAnotherBtn.addEventListener('click', () => {
        const lastType = promptDisplay.value.includes('idei') ? 'idea' : 'description';
        generatePrompt(lastType);
    });

    // AdÄƒugÄƒm event listener pentru "Like"
    likeBtn.addEventListener('click', () => {
        message.textContent = 'ÃŽÈ›i mulÈ›umim pentru feedback! ðŸ˜Š';
        setTimeout(() => {
            message.textContent = '';
        }, 2000);
    });

    // AdÄƒugÄƒm event listener pentru "Dislike"
    dislikeBtn.addEventListener('click', () => {
        message.textContent = 'Ne pare rÄƒu, vom Ã®ncerca sÄƒ Ã®mbunÄƒtÄƒÈ›im! ðŸ˜”';
        setTimeout(() => {
            message.textContent = '';
        }, 2000);
    });

    // AdÄƒugÄƒm event listener pentru "CopiazÄƒ rÄƒspunsul"
    copyBtn.addEventListener('click', () => {
        navigator.clipboard.writeText(responseDiv.textContent).then(() => {
            message.textContent = 'RÄƒspunsul a fost copiat! ðŸ“‹';
            setTimeout(() => {
                message.textContent = '';
            }, 2000);
        });
    });
});
